#include <iostream>
#include <cassert>
#include <vector>
#include <utility>
#include <numeric>

template<typename T>
auto LCS_length(std::vector<T>& X, std::vector<T>& Y) -> std::pair<std::vector<T>, std::vector<T>>
{
	auto m = X.size();
	auto n = Y.size();
	std::vector<std::vector<char>> b(m + 1, std::vector<char>(n + 1));
	std::vector<std::vector<T>> c(m + 1, std::vector<T>(n + 1));
	for (auto i = 1; i <= m; ++i) {
		for (auto j = 1; j <= n; ++j) {
			if (X[i] == Y[j]) {
				c[i][j] = c[i - 1][j - 1] + 1;
				b[i][j] = '↖';
			}
			else if (c[i - 1][j] >= c[i][j - 1]) {
				c[i][j] = c[i - 1][j];
				b[i][j] = '↑';
			}
			else {
				c[i][j] = c[i][j - 1];
				b[i][j] = '←';
			}
		}
	}
	return { c,b };
}

template<typename T>
void print_LCS(std::vector<std::vector<char>>& b, std::vector<T>& X, size_t i, size_t j)
{
	if (i == 0 || j == 0) {
		return;
	}
	if (b[i][j] == '↖') {
		print_LCS(b, X, i - 1, j - 1);
		std::cout << X[i] << ' ';
	}
	else if (b[i][j] == '↑') {
		print_LCS(b, X, i - 1, j);
	}
	else {
		print_LCS(b, X, i, j - 1);
	}
}

int main()
{
	std::vector<char> X{ 'A','B','C','B','D','A','B' };
	std::vector<char> Y{ 'B','D','C','A','B','A' };
	auto [c, b] = LCS_length(X, Y);
	print_LCS(b, X, X.size() - 1, Y.size() - 1);
}
