#include <iostream>
#include <vector>
#include <utility>

template<typename T>
void merge(std::vector<T>& A, size_t p, size_t q, size_t r)
{
	size_t n1 = q - p + 1;
	size_t n2 = r - q;

	std::vector<T> L;
	std::vector<T> R;

	for (size_t i = 0; i < n1; ++i)
	{
		T left = A[p + i];
		L.push_back(left);
	}

	for (size_t j = 0; j < n2; ++j)
	{
		T right = A[q + 1 + j];
		R.push_back(right);
	}

	size_t i = 0;
	size_t j = 0;
	
	A.clear();

	for (size_t k = p; k <= r; ++k)
	{
		while (i < L.size() && j < R.size())
		{
			if (L[i] <= R[j])
			{
				A.push_back(std::move(L[i++]));
				if (i == L.size())
					A.insert(A.end(), R.begin() + j, R.end());

			}
			else
			{
				A.push_back(std::move(R[j++]));
				if (j == R.size())
					A.insert(A.end(), L.begin() + i, L.end());
			}
		}
	}
}

template<typename T>
void mergeSort(std::vector<T>& A, size_t p, size_t r)
{
	if (p < r)
	{
		size_t q = (p + r) / 2;
		mergeSort(A, p, q);
		mergeSort(A, q + 1, r);
		merge(A, p, q, r);
	}
}

int main()
{
	std::vector<int> v{ 5,2,4,1,3 };
	mergeSort(v, 0, v.size() - 1);
	for (auto& x : v)
		std::cout << x << ' ';
	return 0;
}
